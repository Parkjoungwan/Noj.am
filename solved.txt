void B10996(){
  int N;
  std::cin >> N;
  if(N==1) std::cout << "*";
  else{
    for(int i=0;i<2*N;i++)
    {
      if(i%2==1){
        std::cout << " ";
        for(int k=0;k<N/2;k++)
        {
          std::cout << "*";
          std::cout << " ";
        }
      }
      else{
        if(N%2==0){
          for(int j=0;j<N/2;j++)
          {
            std::cout << "*";
            std::cout << " ";
          }
        }
        else{
          for(int j=0;j<N/2+1;j++)
          {
            std::cout << "*";
            std::cout << " ";
          }
        }
      }
      std::cout << "\n";
    }
  }
}

void B5597(){
  int a[31]={0,};
  for(int i=0;i<28;i++)
  {
    int b;
    cin>>b;
    a[b]=1;
  }
  for(int j=1;j<=30;j++){
    if(a[j]==0) 
    cout<<j<<endl;
  }
}
void B10872(){
  long A;
  long re=1;
  cin >> A;
  for(int i=1;i<=A;i++)
  {
    re=re*i;
  }
  cout << re;
}


int Arr[5];
bool Select[5];
void Print(){
  for(int i=0;i<5;i++)
  {
    if(Select[i]==true)
    {
      cout<<Arr[i]<<" ";
    }
  }
  cout << endl;
}
void DFS(int Idx, int Cnt)
{
  if (Cnt == 3)
  {
    Print();
    return;
  }
  for(int i= Idx; i<5;i++)
  {
    if(Select[i]==true) continue;
    Select[i] =true;
    
    DFS(i, Cnt+1);
    Select[i] = false;
  }
}


int main() {
  for(int i=0;i<5;i++)
  {
    Arr[i]=i+1;
  }
  DFS(0,0);
}


#include <iostream>
#include <string>
#include <algorithm>
using namespace std;


int main() {
 int N;
 cin >> N ;

 int *Num = new int[N];

 for(int i=0;i<N;i++){
   cin >> Num[i];
 }

 sort(Num,Num+N);

 cout << Num[0]*Num[N-1];

}

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
 int N;
 cin >> N ;
 vector<int> Num;
 for(int i=0;i<N;i++){
   int AA;
   cin>>AA;
   if(AA==0){
     Num.pop_back();
   }else{
     Num.push_back(AA);
   }
 }
 int sum=0;
 for(int i=0;i<Num.size();i++){
   sum+=Num[i];
 }
 cout<<sum<<endl;
 return 0;
}

void nojam4949(){
 int N;
  cin >> N;
  int *maze=new int[N];
  for (int i=0;i<N;i++){
    cin>>maze[i];
  }
  int count=0;
  int M = N-1;
  for(;M!=0;){
    int check = 1;
    int check2 =0;
    for(int j=M-1;j>=0;j--){
      if(maze[j]>=check){
        M=j;
        check2= 1;
      }
      check++;
    }
    if(check2==0){
        cout << "-1"<<endl;
        return 0;
    }
    count++;
  }
  cout << count << endl;
  return 0;
}


void B5337 (){
  std::cout << ".  .   .\n";
  std::cout << "|  | _ | _. _ ._ _  _\n";
  std::cout << "|/\\|(/.|(_.(_)[ | )(/.\n";
}

void B10926 (){
  std::string a;
  std::cin >> a;
  std::cout << a;
  std::cout << "??!";
}

void B16561(){
  int a;
  std::cin >> a;
  int b;
  int d=1;
  b=(a-6)/3;
  for(int c=2;c<=b;c++){
    if(a==9) d=1;
    else d=d+c;
  }
  std::cout<<d;
}

void B15680(){
  int n;
  std::cin >> n;
  if(n==0)
  {
    std::cout << "YONSEI";
  }
  else std:: cout << "Leading the Way to the Future";
}

void B16394(){
  int a;
  std::cin >> a;
  std:: cout << a-1946;
  
}

void B14624(){
  int a;
  std::cin >> a;
  if(a%2==0)
  {
    std::cout << "I LOVE CBNU";
  }
  else 
  {
    for(int i=0;i<a;i++)
    std::cout<<"*";
    std::cout<<"\n";
    int m=-1;
    for(int k=0;k<a/2+1;k++)
    {
      for(int j=a/2;j>k;j--)
      {
        std::cout<<" ";
      }
      std::cout <<"*";
      for(int l=0;l<m;l++)
      {
        std::cout<<" ";
      }
      if(k!=0)std::cout<<"*";
      std::cout<<"\n";
        m+=2;
    }
  }
}
void B16673(){
  int N=0;
  int C;
  int K;
  int P;
  std::cin >> C;
  std::cin >> K;
  std::cin >> P;
  for(int i=1;i<=C;i++)
  {
    N =N+(i*K)+(i*i*P);
  }
  std::cout << N;
}

void B15947 (){
  int N;
  std::cin >> N;
  if(N%14==1||N%14==13) std::cout<<"baby";
  else if(N%14==2||N%14==0) std::cout<<"sukhwan";
  else if(N%14==3||N%14==7||N%14==11){
    std::cout << "tu";
    if(N/14<3)
    for(int i=-2;i<N/14;i++)
    {
      std::cout<<"ru";
    }
    else{
    std::cout<<"+ru*";
    std::cout<< N/14+2;
    }
  }
  else if(N%14==4||N%14==8||N%14==12){
    std::cout << "tu";
    if(N/14<4)
    for(int i=-1;i<N/14;i++)
    {
      std::cout<<"ru";
    }
    else{
    std::cout<<"+ru*";
    std::cout<< N/14+1;
    }
  }
  else if(N%14==5)std::cout<<"very";
  else if(N%14==6)std::cout<<"cute";
  else if(N%14==9)std::cout<<"in";
  else if(N%14==10)std::cout<<"bed";
}

void B2446(){
  int N;
  std::cin >> N;
  for(int i=0;i<N;i++)
  {
    for(int k=0;k<i;k++)
    {
      std::cout<<" ";
    }
    for(int j=(2*N-1)-i*2;j>0;j--)
    {
      std::cout << "*";
    }
    std::cout<<"\n";
  }
  for(int l=0;l<N;l++){
    if(l!=0)
    for(int z=N-l;z>1;z--)
    {
      std::cout << " ";
    }
    if(l!=0)
    for(int m=0;m<(l*2)+1;m++)
    {
      std::cout << "*";
    }
    if(l!=0)
    std::cout << "\n";
  }
}

void B2523(){
  int N;
  std::cin >> N;
  for(int i=0;i<N;i++)
  {
    for(int j=0;j<i+1;j++)
    {
      std::cout << "*";
    }
    std::cout << "\n";
  }
  for(int k=1;k<N;k++)
  {
    for(int l=0;l<N-k;l++)
    {
      std::cout << "*";
    }
    std::cout << "\n";
  }
}

void B10990(){
  int a;
  std::cin >> a;
  a=a*2-1;
    int m=-1;
    for(int k=0;k<a/2+1;k++)
    {
      for(int j=a/2;j>k;j--)
      {
        std::cout<<" ";
      }
      std::cout <<"*";
      for(int l=0;l<m;l++)
      {
        std::cout<<" ";
      }
      if(k!=0)std::cout<<"*";
      std::cout<<"\n";
        m+=2;
    }
}

void B10992(){
  int a;
  std::cin >> a;
  a=a*2-1;
    int m=-1;
    for(int k=0;k<a/2+1;k++)
    {
      if(k==a/2)
      {
        for(int B2=0;B2<a;B2++)
        std::cout<<"*";
      }
      else{
      for(int j=a/2;j>k;j--)
      {
        std::cout<<" ";
      }
      std::cout <<"*";
      for(int l=0;l<m;l++)
      {
        std::cout<<" ";
      }
      if(k!=0)std::cout<<"*";
      std::cout<<"\n";
        m+=2;
    }
    }
}

void B10996(){
  int N;
  std::cin >> N;
  if(N==1) std::cout << "*";
  else{
    for(int i=0;i<2*N;i++)
    {
      if(i%2==1){
        std::cout << " ";
        for(int k=0;k<N/2;k++)
        {
          std::cout << "*";
          std::cout << " ";
        }
      }
      else{
        if(N%2==0){
          for(int j=0;j<N/2;j++)
          {
            std::cout << "*";
            std::cout << " ";
          }
        }
        else{
          for(int j=0;j<N/2+1;j++)
          {
            std::cout << "*";
            std::cout << " ";
          }
        }
      }
      std::cout << "\n";
    }
  }
}

void nojam4949(){
   for(;;){
   stack<char> st;
   string s;
   getline(cin,s);
   if(s=="."){
     break;
   }
   int check = 0;
   for (int i=0;i<s.size();i++){
     char c = s[i];
     if(c=='('||c=='['){
       st.push(c);
     }else if(c==')'){
       if(st.empty()||st.top()!='('){
         check = 1;
         break;
       }else st.pop();
     }else if(c==']'){
       if(st.empty()||st.top()!='['){
         check = 1;
         break;
       }else st.pop();
     }
   }
  if(check||!st.empty()) cout<<"no\n";
  else cout << "yes\n";
 }
}

void nojam10866(){
  int N;
  cin >> N;
  vector<int> deck;
  for (int i=0;i<N;i++){
    string s;
    cin >> s;
    if(s=="push_front"){
      int X;
      cin >> X;
      deck.insert(deck.begin(),X);
    }else if(s=="push_back"){
      int X;
      cin >> X;
      deck.push_back(X);
    }else if(s=="pop_front"){
      if(deck.empty()){
        cout<<"-1"<<endl;
      }else {
        cout<<deck.front()<<endl;
        deck.erase(deck.begin());
      }
    }else if(s=="pop_back"){
      if(deck.empty()){
        cout<<"-1"<<endl;
      }else {
        cout<<deck.back()<<endl;
        deck.pop_back();
      }
    }else if(s=="size"){
      cout<<deck.size()<<endl;
    }else if(s=="empty"){
      cout<<deck.empty()<<endl;
    }else if(s=="front"){
      if(deck.empty()){
        cout<<"-1"<<endl;
      }else cout<<deck.front()<<endl;
    }else{
      if(deck.empty()){
        cout<<"-1"<<endl;
      }else cout<<deck.back()<<endl;
    }
  }


}

int fac(int n){
  int result=1;
  for(int i=1;i<=n;i++){
    result*=i;
  }
  return result;
}

void nojam13908(){
  int n,m;
  cin >>n;
  cin >>m;
  int* known = new int[m];
  for (int i=0;i<m;i++){
    cin >>known[i];
  }
  int newn=n;
  int mul=1;
  int formul=1;
  for (int i=0;i<n-m;i++){
    mul*=newn;
    newn--;
    formul*=10;
  }
  mul=mul/fac(n-m);

  int full = mul*formul;
  int overlap = 0;
  if(n>2) {
    overlap = mul*(formul/10);
  }
  int fulloverlap = mul-1;
  int result = full-overlap-fulloverlap;
  if(n==m){
    result=fac(n);
  }
  if(m==0){
    result=formul;
  }
  cout << result << endl;

}

void nojam1021(){
  //입력시작
  int M,N;
  cin >>M;
  cin >>N;
  int* arr=new int[M];
  for(int i=0;i<M;i++){
    arr[i]=i+1;
  }
  int* target=new int[N];
  for(int i=0;i<N;i++){
    cin>>target[i];
  }
  //입력끝
  //함수시작
  int sum = 0;
  for(int i=0;i<N;i++){
    int front=0;
    for(int j=0;j<M;j++){
      if(target[i]==arr[j]){
        break;
      }else{
        front++;
      }
    }
    //타겟 넘버까지의 길이 측정완료
    int middle = M/2;
    int* cpyarr = new int[M-1];
    int count = 0;
    if(front<=middle){
      //앞으로 밀어주기
      count = front;
    }else{
      //뒤로 밀어주기
      count = M-front;
    }
    //바뀐 배열 정리
    for(int k=0;k<M-front-1;k++){
        cpyarr[k]=arr[front+k+1];
    }
    int num=0;
    for(int l=M-front-1;l<M-1;l++){
      cpyarr[l]=arr[num];
      num++;
    }
    arr= cpyarr;
    sum+=count;
    M=M-1;
  }
  //함수끝
  //출력
  cout << sum << endl;
}


#include <iostream>
#include <vector>
using namespace std;

#define endl "\n"
#define MAX 501
#define INF 1<<30

struct edge{
  int from;
  int to;
  int cost;
};

int N, M;
long long Dist[MAX];
vector<edge> Edge;


int main() {

  cin >> N >> M;
  for (int i=1; i<=N;i++) Dist[i] = INF;
  for (int i=0; i< M; i++){
    int From, To, Cost;
    edge tmp;
    cin >> tmp.from >> tmp.to >> tmp.cost;

    Edge.push_back(tmp);
  }

  Dist[1] = 0;
  for (int i=1; i<=N - 1; i++){
    for(int j=0; j<Edge.size(); j++){
      int From = Edge[j].from;
      int To = Edge[j].to;
      int Cost = Edge[j].cost;

      if (Dist[From] == INF) continue;
      if (Dist[To] > Dist[From] + Cost) Dist[To] =Dist[From] + Cost;
    }
  }

  for (int i = 0 ; i < Edge.size(); i++){
      int From = Edge[i].from;
      int To = Edge[i].to;
      int Cost = Edge[i].cost;

    if (Dist[From] == INF) continue;
    if (Dist[To] > Dist[From] + Cost){
      cout << -1 << endl;
      exit(0);
    }
  }

  for (int i=2; i<=N; i++){
    if (Dist[i] == INF) cout << -1 << endl;
    else cout << Dist[i]<<endl;
  }

  return 0;
}

void nojam10951(){
  int N, M;
  for(;;){
    cin >> N;
    cin >> M;
    if(cin.eof()) break;
    cout << N+M<<endl;
  }
}

void nojam10815(){
  int N,M;
  cin >>N;
  int* sang=new int[N];
  for(int i=0;i<N;i++){
    cin >> sang[i];
  }
  sort(sang,sang+N);
  cin >> M;
  int* nosang=new int[M];
  for(int i=0;i<M;i++){
    cin >> nosang[i];
  }
  int target;
  int check=0;
  for (int i=0;i<M;i++){
    target=nosang[i];
    check=0;
    int end=N-1,start=0;
    int mid = (end-start)/2;
    for(;end-start>=0;){
      if(sang[mid]==target){
        nosang[i]=1;
        check=1;
        break;
      }else if(sang[mid]<=target){
        start=mid+1;
      }else{
        end=mid-1;
      }
      mid=(end+start)/2;
    }
    if(check!=1){
      nosang[i]=0;
    }
  }

  for(int i=0;i<M;i++){
    cout << nosang[i]<<" ";
  }
}

void nojam11053(){
  int N;
  int Mp[1010];
  int A[1010];
  cin >> N;
  for(int i=1;i<=N;i++){
    cin >> A[i];
  }
  int max=0;
  for(int i=1;i<=N;i++){
    int min = 0;
    for(int j=0;j<i;j++){
      if(A[i]>A[j]){
        if(min<Mp[j]) min = Mp[j];
      }
    }
    Mp[i] = min +1;
    if(max < Mp[i]){
      max = Mp[i];
    }
  }
  cout << max;
}

#define endl "\n"
#define MAX 505
#define INF 1<<30

struct edge{
  int from;
  int to;
  int cost;
};

int TC;
int N, M, W;
long long Dist[MAX];
vector<edge> Edge;
int check =0;

void nojam1865(){
  cin >> TC;
  for(int i=0;i<TC;i++){
    cin >> N >> M>> W;
    Edge.clear();
    Edge.resize(N+1);
    check=0;
    for(int i=0;i<M;i++){
      edge tmp;
      cin >> tmp.from >> tmp.to >> tmp.cost;
      Edge.push_back(tmp);
      edge tmp2;
      tmp2.from=tmp.to;
      tmp2.to=tmp.from;
      tmp2.cost=tmp.cost;
      Edge.push_back(tmp2);
    }
    for(int i=0;i<W;i++){
      edge tmp;
      cin >> tmp.from >> tmp.to >> tmp.cost;
      tmp.cost = -tmp.cost;
      Edge.push_back(tmp);
    }
    for(int i=2;i<=N;i++){
      Dist[i]=INF;
    }
    for (int i=1; i<=N; i++){
      for(int z=1; z<=N; z++){
        for(int j=0; j<Edge.size(); j++){
          int From = Edge[j].from;
          int To = Edge[j].to;
          int Cost = Edge[j].cost;

          if (Dist[z]!=INF&&Dist[To] > Dist[From] + Cost) {
            Dist[To] =Dist[From] + Cost;
            if(i==N)check=1; 
          }
        }
      }
   }
    if (check) cout << "Yes"<<endl;
    else cout << "No"<<endl;
  }
}
